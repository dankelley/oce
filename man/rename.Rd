% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rename.R
\name{rename}
\alias{rename}
\title{Rename variables according to a specified dictionary}
\usage{
rename(x, dictionary = "ioos.csv", debug = 0)
}
\arguments{
\item{x}{an \linkS4class{oce} object.}

\item{dictionary}{either a string or a data frame.  If a string, then it is
either the name of a built-in vocabulary (e.g. \code{ioos} or \code{sbe}; see
\sQuote{Details}) or the name of a CSV file that defines a dictionary. If it
is a data frame, the it must have four unnamed columns containing information as
described in \sQuote{Details}.}

\item{debug}{an integer specifying whether debugging information is
to be printed during the processing. This is a general parameter that
is used by many \code{oce} functions. Generally, setting \code{debug=0}
turns off the printing, while higher values suggest that more information
be printed. If one function calls another, it usually reduces the value of
\code{debug} first, so that a user can often obtain deeper debugging
by specifying higher \code{debug} values.}
}
\description{
There are many conventions for naming oceanographic variables, and this
function provides a way to map names in data files to names to be used in an
object created from those files.
}
\details{
The dictionary format, whether read from a built-in CSV file, or from a
user-supplied CSV file, or as a data frame, contains four character-valued
columns, as follows.
\enumerate{
\item The original name of a variable in the \code{data} slot of \code{x}. This is used in
matching such names against targets. Matches may be in the form of
equality, or \link{regexp} match. In the latter case, a \verb{#} character may be
used as an abbreviation for a digit.  Note that \code{^} is inserted at the
start of the value, and \code{$} at the end, before searching for a match with
\code{\link[=grep]{grep()}}.
\item The desired oce-convention name to be used for a match. Many files will
yield duplicates, e.g. for multiple temperature sensors, so
\code{\link[=unduplicateNames]{unduplicateNames()}} is called after all names are processed, to avoid
problems.
\item The unit for the column, typically in a format handled by \code{\link[=expression]{expression()}}.
Note that this value is ignored if the object already holds stated units
for the quantity in question.
\item The scale for the column (again, only used if the object does not already
hold a scale).
}

For examples, see the built-in dictionaries, which are stored in
files with locations that are revealed with the following.

\if{html}{\out{<div class="sourceCode">}}\preformatted{readLines(system.file("extdata", "dictionary_sbe.csv", package = "oce"))
readLines(system.file("extdata", "dictionary_ioos.csv", package = "oce"))
}\if{html}{\out{</div>}}

For example, the entry

\if{html}{\out{<div class="sourceCode">}}\preformatted{PSALST##,salinity,,PSS-78
}\if{html}{\out{</div>}}

specifies that a variable named \code{"PSALT"} followed by 2 digits
is to be renamed as \code{"salinity"}, that the unit (if not
already defined within \code{x}) is to be blank, and that
the scale (again, if not already defined) is to be \code{"PSS-78"}.
}
\section{History and Plans}{

This function was written in late September, 2024. It is likely
to evolve through the remaining months of 2024, after real-world
testing by the developers.
}

\examples{
library(oce)
# Example 1: made-up data
d <- new("oce")
d <- oceSetData(d, "S", c(30, 31))
d <- oceSetData(d, "T", c(10, 11))
dictText <- "S,salinity,,
T,temperature,degree*C,ITS-90"
dictionary <- read.csv(text = dictText, header = FALSE)
rename(d, dictionary)
#
# Example 2: a CIOOS NetCDF file. Note that this file
# is downloaded and removed at the end; in practice,
# it is likely that the file might be retained locally.
if (requireNamespace("curl")) {
    file <- tempfile(fileext = ".nc") # removed later
    server <- "https://cioosatlantic.ca/erddap/files"
    program <- "bio_atlantic_zone_monitoring_program_ctd"
    subprogram <- "Bedford\%20Basin\%20Monitoring\%20Program"
    year <- 2023
    cast <- 1
    url <- sprintf(
        "\%s/\%s/\%s/\%s/CTD_BCD\%s667_\%03d_1_DN.ODF.nc",
        server, program, subprogram, year, year, cast
    )
    curl::curl_download(url, file)
    d <- read.netcdf(file)
    summary(d)
    dd <- rename(d, "ioos")
    summary(dd)
    unlink(file)
}

}
\author{
Dan Kelley
}
